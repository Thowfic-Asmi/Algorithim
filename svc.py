# -*- coding: utf-8 -*-
"""SVC

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1i7IvCZn93U3TZwsHzAU5gBOm8YRJcN37
"""

import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
import matplotlib.pyplot as plt

iris_load = load_iris()

iris_df = pd.DataFrame(iris_load.data, columns=iris_load.feature_names)
iris_df['target'] = iris_load.target

iris_df['flower_name'] = iris_df.target.apply(lambda x: iris_load.target_names[x])

model = SVC()
model.fit(x_train, y_train)

df0 = iris_df[iris_df.target == 0]
df1 = iris_df[iris_df.target == 1]

plt.xlabel('sepal length (cm)')
plt.ylabel('sepal width (cm)')
plt.scatter(df0['sepal length (cm)'], df0['sepal width (cm)'], color='green', marker='+', label=iris_load.target_names[0])
plt.scatter(df1['sepal length (cm)'], df1['sepal width (cm)'], color='blue', marker='.', label=iris_load.target_names[1])
plt.legend()
plt.show()

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

from matplotlib.pyplot import xlabel, ylabel, scatter, show

plt.xlabel('sepal length (cm)')
plt.ylabel('sepal width (cm)')
plt.scatter(df0['sepal length (cm)'], df0['sepal width (cm)'], color='green', marker='+', label=iris_load.target_names[0])
plt.scatter(df1['sepal length (cm)'], df1['sepal width (cm)'], color='blue', marker='.', label=iris_load.target_names[1])
plt.legend()
plt.show()

plt.xlabel('petal length (cm)')
plt.ylabel('petal width (cm)')
plt.scatter(df0['petal length (cm)'], df0['petal width (cm)'],color="green",marker='+')
plt.scatter(df1['petal length (cm)'], df1['petal width (cm)'],color="blue",marker='.')

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(iris_df.drop(['target','flower_name', 'target_names'],axis='columns'),iris_df.target,test_size=0.2)

len(x_train)

from sklearn.svm import SVC
model = SVC()

from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()

y_train_encoded = le.fit_transform(y_train)

model.fit(x_train, y_train_encoded)